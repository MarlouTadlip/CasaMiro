@page "/communityforum"
@using CasaMiro.Models
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CasaMiro.Data.ApplicationDbContext> DbFactory
@using CasaMiro.Components.Layout
@layout UserDashboardLayout
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container-fluid">
    <div class="row">
        <!-- Page Header Section -->
        <div class="col-lg-8 mx-auto">
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <h3 class="card-title">Community Forum</h3>
                    <p class="text-muted">Join the conversation! Post new topics or reply to existing ones.</p>
                </div>
            </div>

            <!-- New Post Button -->
            <div class="d-flex justify-content-end mb-3">
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newPostModal">
                    <i class="fa-solid fa-plus-circle"></i> New Post
                </button>
            </div>

            <!-- Forum Topics List -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">Forum Topics</h5>
                    <p class="text-muted">Browse through the topics posted by community members.</p>

                    @if (userForumPosts.Count == 0)
                    {
                        <div class="alert alert-info">
                            No forum posts yet. Be the first to start a conversation!
                        </div>
                    }
                    else
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Title</th>
                                    <th>Author</th>
                                    <th>Post Date</th>
                                    <th>Replies</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var post in userForumPosts)
                                {
                                    <tr>
                                        <td>@post.Id</td>
                                        <td>@post.Title</td>
                                        <td>@post.Author</td>
                                        <td>@post.Date.ToString("MMM dd, yyyy")</td>
                                        <td>@post.Replies.Count</td>
                                        <td>
                                            <button class="btn btn-info btn-sm" @onclick="() => ViewPostDetails(post.Id)">
                                                <i class="fa-solid fa-eye"></i> View
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>

            <!-- Modal for Posting New Topic -->
            <div class="modal fade" id="newPostModal" tabindex="-1" aria-labelledby="newPostModalLabel" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="newPostModalLabel">Create New Post</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="@newForumPost" OnValidSubmit="HandleCreateNewPost" FormName="createPost">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />

                                <div class="mb-3">
                                    <label for="Title" class="form-label">Post Title</label>
                                    <InputText id="Title" class="form-control" @bind-Value="newForumPost.Title" placeholder="Enter post title" />
                                </div>

                                <div class="mb-3">
                                    <label for="Content" class="form-label">Post Content</label>
                                    <InputTextArea id="Content" class="form-control" @bind-Value="newForumPost.Content" placeholder="Enter post content" />
                                </div>

                                <div class="modal-footer">
                                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                    <button type="submit" class="btn btn-primary">Create Post</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ForumPost> userForumPosts = new List<ForumPost>();
    private ForumPost newForumPost = new ForumPost();
    private bool firstRender = true;
    private DotNetObjectReference<UserCommunityForum>? objRef;

    protected override async Task OnInitializedAsync()
    {
        await LoadForumPosts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setDotNetReference", objRef);
        }
    }

    private async Task LoadForumPosts()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        userForumPosts = await context.ForumPosts.Include(p => p.Replies).ToListAsync();
        StateHasChanged();
    }

    private async Task HandleCreateNewPost()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            using var context = await DbFactory.CreateDbContextAsync();
            newForumPost.Date = DateTime.Now;
            newForumPost.Author = user.Identity.Name ?? "Unknown";

            context.ForumPosts.Add(newForumPost);
            await context.SaveChangesAsync();

            newForumPost = new ForumPost();

            await LoadForumPosts();
            StateHasChanged();

            await JSRuntime.InvokeVoidAsync("closeModal", "newPostModal");
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private void ViewPostDetails(int id)
    {
        var post = userForumPosts.FirstOrDefault(p => p.Id == id);
        if (post != null)
        {
            Console.WriteLine($"Viewing post: {post.Title}");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }
}

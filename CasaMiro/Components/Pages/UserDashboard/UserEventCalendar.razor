@page "/usereventcalendar"
@using CasaMiro.Models
@inject NavigationManager Navigation

@using CasaMiro.Components.Layout
@layout UserDashboardLayout

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-10 mx-auto">

            <!-- Calendar Header -->
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <h3 class="card-title">Event Calendar</h3>
                    <p class="text-muted">View and manage your scheduled events.</p>

                    <!-- Month Navigation -->
                    <div class="d-flex justify-content-between align-items-center">
                        <button class="btn btn-secondary" @onclick="PreviousMonth">← Previous</button>
                        <h4>@currentMonth.ToString("MMMM yyyy")</h4>
                        <button class="btn btn-secondary" @onclick="NextMonth">Next →</button>
                    </div>
                </div>
            </div>

            <!-- Calendar Grid -->
            <div class="calendar mb-5">

                <!-- Days of the Week -->
                <div class="calendar-header d-grid text-center fw-bold border"
                     style="grid-template-columns: repeat(7, 1fr);">
                    @foreach (var dayName in new[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" })
                    {
                        <div class="border py-2 bg-light text-truncate">@dayName</div>
                    }
                </div>

                <!-- Calendar Days -->
                <div class="calendar-body d-grid text-center"
                     style="
                        display: grid;
                        grid-template-columns: repeat(7, 1fr);
                        grid-auto-rows: 100px;
                        overflow: hidden;
                     ">
                    @for (int i = 0; i < startDayOffset; i++)
                    {
                        <div class="border bg-white"></div>
                    }

                    @foreach (var day in Enumerable.Range(1, daysInMonth))
                    {
                        var eventForDay = userEvents.FirstOrDefault(e =>
                        e.EventDate.Date == new DateTime(currentMonth.Year, currentMonth.Month, day));

                        <div class="border p-2 position-relative d-flex flex-column justify-content-between"
                             @onclick="() => ShowEventDetails(day)"
                             style="cursor: pointer; overflow: hidden;">
                            <div class="text-end fw-bold">@day</div>
                            @if (eventForDay != null)
                            {
                                <div class="badge bg-info text-dark text-truncate mt-1 w-100"
                                     style="font-size: 0.75rem;"
                                     title="@eventForDay.Name">
                                    @eventForDay.Name
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Modal -->
@if (isEventModalVisible)
{
    <div class="modal fade show d-block"
         tabindex="-1"
         role="dialog"
         style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content border border-dark shadow rounded-3">
                <div class="modal-header">
                    <h5 class="modal-title">
                        Event on @selectedEventDate.ToShortDateString()
                    </h5>
                    <button type="button"
                            class="btn-close"
                            @onclick="CloseEventModal"
                            aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (selectedEvent != null)
                    {
                        <p><strong>@selectedEvent.Name</strong></p>
                        <p>@selectedEvent.Description</p>
                    }
                    else
                    {
                        <p>No events for this day.</p>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseEventModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private DateTime currentMonth = DateTime.Now;
    private int daysInMonth;
    private int startDayOffset;

    private List<UserEvent> userEvents = new()
    {
        new UserEvent
        {
            Id = 1,
            Name = "Project Meeting",
            EventDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 10),
            Description = "Monthly project discussion."
        },
        new UserEvent
        {
            Id = 2,
            Name = "Dentist Appointment",
            EventDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 15),
            Description = "Annual check-up."
        }
    };

    private UserEvent selectedEvent;
    private DateTime selectedEventDate;
    private bool isEventModalVisible = false;

    protected override void OnInitialized()
    {
        UpdateCalendar();
    }

    private void UpdateCalendar()
    {
        daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
        startDayOffset = (int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek;
    }

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        UpdateCalendar();
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        UpdateCalendar();
    }

    private void ShowEventDetails(int day)
    {
        selectedEventDate = new DateTime(currentMonth.Year, currentMonth.Month, day);
        selectedEvent = userEvents.FirstOrDefault(e => e.EventDate.Date == selectedEventDate);
        isEventModalVisible = true;
    }

    private void CloseEventModal()
    {
        isEventModalVisible = false;
    }
}

@page "/usereventcalendar"
@using CasaMiro.Models
@using CasaMiro.Data
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JSRuntime
@using CasaMiro.Components.Layout
@layout UserDashboardLayout
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-10 mx-auto">
            <!-- Calendar Header -->
            <div class="card shadow-sm mb-4">
                <div class="card-body text-center">
                    <h3 class="card-title">Event Calendar</h3>
                    <p class="text-muted">View community events and activities.</p>

                    <!-- Month Navigation -->
                    <div class="d-flex justify-content-between align-items-center">
                        <button class="btn btn-secondary" @onclick="PreviousMonth"><i class="fa-solid fa-chevron-left"></i> Previous</button>
                        <h4>@currentMonth.ToString("MMMM yyyy")</h4>
                        <button class="btn btn-secondary" @onclick="NextMonth">Next <i class="fa-solid fa-chevron-right"></i></button>
                    </div>
                </div>
            </div>

            <!-- Calendar Grid -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <!-- Days of the Week -->
                    <div class="calendar-header d-grid text-center fw-bold border"
                         style="grid-template-columns: repeat(7, 1fr);">
                        @foreach (var dayName in new[] { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" })
                        {
                            <div class="border py-2 bg-light text-truncate">@dayName</div>
                        }
                    </div>

                    <!-- Calendar Days -->
                    <div class="calendar-body d-grid text-center"
                         style="grid-template-columns: repeat(7, 1fr); grid-auto-rows: 100px; overflow: hidden;">
                        @for (int i = 0; i < startDayOffset; i++)
                        {
                            <div class="border bg-white"></div>
                        }

                        @foreach (var day in Enumerable.Range(1, daysInMonth))
                        {
                            var date = new DateTime(currentMonth.Year, currentMonth.Month, day);
                            var eventsForDay = events.Where(e => e.Date.Date == date).ToList();

                            <div class="border p-2 position-relative d-flex flex-column justify-content-between"
                                 @onclick="() => ShowEventDetails(date)"
                                 style="cursor: pointer; overflow: hidden;">
                                <div class="text-end fw-bold">@day</div>
                                @if (eventsForDay.Any())
                                {
                                    @foreach (var evt in eventsForDay)
                                    {
                                        <div class="badge bg-info text-dark text-truncate mt-1 w-100"
                                             style="font-size: 0.75rem;"
                                             title="@evt.Title">
                                            @evt.Title
                                        </div>
                                    }
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Event Details Modal -->
<div class="modal fade" id="eventDetailsModal" tabindex="-1" role="dialog" aria-labelledby="eventDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="eventDetailsModalLabel">Events on @selectedEventDate.ToString("MMMM d, yyyy")</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseEventModal">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedEvents.Any())
                {
                    @foreach (var evt in selectedEvents)
                    {
                        <div class="mb-3">
                            <p><strong>@evt.Title</strong></p>
                            <p>@evt.Description</p>
                            <p><small>Created by: @(evt.CreatedBy?.FullName ?? "Unknown") (@(evt.CreatedBy?.Email ?? "N/A"))</small></p>
                        </div>
                    }
                }
                else
                {
                    <p>No events for this day.</p>
                }
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" @onclick="CloseEventModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private DateTime currentMonth = DateTime.Now;
    private int daysInMonth;
    private int startDayOffset;
    private List<Event> events = new();
    private List<Event> selectedEvents = new();
    private DateTime selectedEventDate;
    private string? currentUserEmail;

    protected override async Task OnInitializedAsync()
    {
        // Get current user
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserEmail = user.FindFirst(ClaimTypes.Name)?.Value;
            Console.WriteLine($"UserEventCalendar: Initialized for user {currentUserEmail}");
        }
        else
        {
            Console.WriteLine("UserEventCalendar: User not authenticated, redirecting to login");
            Navigation.NavigateTo("/login");
            return;
        }

        await UpdateCalendar();
    }

    private async Task UpdateCalendar()
    {
        daysInMonth = DateTime.DaysInMonth(currentMonth.Year, currentMonth.Month);
        startDayOffset = (int)new DateTime(currentMonth.Year, currentMonth.Month, 1).DayOfWeek;

        // Load events for the current month
        using var context = await DbFactory.CreateDbContextAsync();
        events = await context.Events
            .Include(e => e.CreatedBy)
            .Where(e => e.Date.Year == currentMonth.Year && e.Date.Month == currentMonth.Month)
            .OrderBy(e => e.Date)
            .ToListAsync();
        StateHasChanged();
    }

    private void PreviousMonth()
    {
        currentMonth = currentMonth.AddMonths(-1);
        UpdateCalendar();
    }

    private void NextMonth()
    {
        currentMonth = currentMonth.AddMonths(1);
        UpdateCalendar();
    }

    private void ShowEventDetails(DateTime date)
    {
        selectedEventDate = date;
        selectedEvents = events.Where(e => e.Date.Date == date).ToList();
        JSRuntime.InvokeVoidAsync("showModal", "eventDetailsModal");
    }

    private void CloseEventModal()
    {
        JSRuntime.InvokeVoidAsync("hideModal", "eventDetailsModal");
    }
}
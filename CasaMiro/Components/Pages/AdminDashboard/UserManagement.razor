@page "/usermanagement"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using CasaMiro.Models
@inject IDbContextFactory<CasaMiro.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



@using CasaMiro.Components.Layout
@layout DashboardLayout

<div class="content">
    <div class="col-12">
        <div class="card mt-3">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="card-title">User Management</h4>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                    <i class="fa-solid fa-user-plus"></i> Add New User
                </button>
            </div>
            <div class="card-body">
                <!-- Users Table -->
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Full Name</th>
                            <th>Email</th>
                            <th>Phone</th>
                            <th>Address</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Users)
                        {
                            <tr>
                                <td>@user.Id</td>
                                <td>@user.FullName</td>
                                <td>@user.Email</td>
                                <td>@user.Phone</td>
                                <td>@user.Address</td>
                                <td>@user.Role</td>
                                <td>@(user.Is_active ? "Active" : "Inactive")</td>
                                <td>
                                    <button class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#editUserModal" @onclick="() => OpenEditModal(user)">
                                        <i class="fa-solid fa-pencil-alt"></i> Edit
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">
                                        <i class="fa-solid fa-trash-alt"></i>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Bootstrap Modal for Adding New User -->
<div class="modal fade" id="addUserModal" tabindex="-1" aria-labelledby="addUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@NewUser" OnValidSubmit="AddUser" FormName="createNewUser" >
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert"/>

                    <div class="mb-3">
                        <label class="form-label">Full Name</label>
                        <InputText class="form-control" @bind-Value="NewUser.FullName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText type="email" class="form-control" @bind-Value="NewUser.Email" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText class="form-control" @bind-Value="NewUser.Password" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <InputText class="form-control" @bind-Value="NewUser.Address" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="NewUser.Phone" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <InputSelect class="form-control" @bind-Value="NewUser.Role">
                            <option>Admin</option>
                            <option>Homeowner</option>
                            <option>Security</option>
                            <option>Treasurer</option>
                            <option>Maintenance</option>
                            <option>Moderator</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <InputCheckbox class="form-check-input" @bind-Value="NewUser.Is_active" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save User</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<!-- Edit User Modal -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="@EditingUser" OnValidSubmit="UpdateUser" FormName="editUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />

                    <div class="mb-3">                                      
                        <label class="form-label">Full Name</label>
                        <InputText class="form-control" @bind-Value="EditingUser.FullName" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText type="email" class="form-control" @bind-Value="EditingUser.Email" required />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <InputText class="form-control" @bind-Value="EditingUser.Address" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone</label>
                        <InputText class="form-control" @bind-Value="EditingUser.Phone" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <InputSelect class="form-control" @bind-Value="EditingUser.Role">
                            <option>Admin</option>
                            <option>Homeowner</option>
                            <option>Security</option>
                            <option>Treasurer</option>
                            <option>Maintenance</option>
                            <option>Moderator</option>
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <InputCheckbox class="form-check-input" @bind-Value="EditingUser.Is_active" />
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="submit" class="btn btn-primary">Save Changes</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    private bool firstRender = true;

    @inject IJSRuntime JSRuntime

    private List<User> Users = new();
    private User NewUser = new()
        {
            Email = "",
            Password = "",
            FullName = "",
            Phone = "",
            Address = "",
            Role = "",
        };
    private User EditingUser = new()
        {
            Email = "",
            Password = "",
            FullName = "",
            Phone = "",
            Address = "",
            Role = "",
        };

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.firstRender = false;
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("setDotNetReference", objRef);
        }
    }
    private async Task LoadUsers()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        Users = await context.Users.ToListAsync();
        StateHasChanged(); // Add this to ensure UI updates
    }
    private async Task AddUser()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        context.Users.Add(NewUser);
        await context.SaveChangesAsync();

        // Reset form
        NewUser = new User()
            {
                Email = "",
                Password = "",
                FullName = "",
                Phone = "",
                Address = "",
                Role = "",
            };
        await LoadUsers();
        await JSRuntime.InvokeVoidAsync("closeModal", "addUserModal");
    }

    private void OpenEditModal(User user)
    {
        EditingUser = new User
            {
                Id = user.Id,
                Email = user.Email,
                FullName = user.FullName,
                Phone = user.Phone,
                Role = user.Role,
                Is_active = user.Is_active,
				Password = user.Password,
				Address = user.Address
            };
    }

    private async Task UpdateUser()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var user = await context.Users.FindAsync(EditingUser.Id);

        if (user != null)
        {
            user.Email = EditingUser.Email;
            user.FullName = EditingUser.FullName;
            user.Address = EditingUser.Address;
            user.Phone = EditingUser.Phone;
            user.Role = EditingUser.Role;
            user.Is_active = EditingUser.Is_active;

            await context.SaveChangesAsync();
            await LoadUsers();
        }
        await JSRuntime.InvokeVoidAsync("closeModal", "editUserModal");
    }

    private DotNetObjectReference<UserManagement>? objRef;


    private async Task DeleteUser(int userId)
    {
        await JSRuntime.InvokeVoidAsync("confirmDelete", userId);
    }

    [JSInvokable]
    public async Task DeleteUserConfirmed(int userId)
    {
        using var context = await DbFactory.CreateDbContextAsync();
        var user = await context.Users.FindAsync(userId);

        if (user != null)
        {
            context.Users.Remove(user);
            await context.SaveChangesAsync();

            // Reload the users list
            await LoadUsers();

            // Force UI to update
            StateHasChanged();

            // Show success message
            await JSRuntime.InvokeVoidAsync("showDeleteSuccess");
        }
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

}

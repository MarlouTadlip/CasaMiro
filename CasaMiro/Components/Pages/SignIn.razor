@page "/login"
@using CasaMiro.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject AuthenticationService AuthService
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div id="body">
    <div class="login-container">
        <div class="login-box animate__animated animate__fadeIn">
            <h2 class="text-center">Welcome Back</h2>
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="handelogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p class="text-danger animate__animated" id="errorMessage">@ErrorMessage</p>
                <div class="mb-3">
                    <label class="form-label" for="email">Email Address</label>
                    <InputText id="email" type="email" class="form-control" placeholder="Enter your email" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" placeholder="Enter your password" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            ErrorMessage = string.Empty;
            var user = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);

            if (user == null)
            {
                ErrorMessage = "Invalid email or password.";
                await JS.InvokeVoidAsync("triggerShakeAnimation");
                return;
            }

            // Navigation remains the same
            var role = user.Role ?? "User";
            if (role.Equals("Admin"))
            {
                Navigation.NavigateTo("/admin-dashboard");
            }
            else if (role.Equals("Staff"))
            {
                Navigation.NavigateTo("/staff-dashboard");
            }
            else if (role.Equals("Homeowner"))
            {
                Navigation.NavigateTo("/user-dashboard");
            }
            else
            {
                Console.WriteLine("Error: Invalid Role");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Login error: {ex.Message}");
            ErrorMessage = "Login failed. Please try again.";
            await JS.InvokeVoidAsync("triggerShakeAnimation");
        }
    }
    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

}

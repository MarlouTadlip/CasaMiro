@page "/login"
@rendermode InteractiveServer
@using CasaMiro.Models
@using System.Diagnostics
@inject NavigationManager Navigation
@inject AuthenticationService AuthenticationService
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

<div id="body">
    <div class="login-container">
        <div class="login-box animate__animated animate__fadeIn">
            <h2 class="text-center">Welcome Back</h2>
            <EditForm Model="@loginModel" OnValidSubmit="Login">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p class="text-danger animate__animated" id="errorMessage">@ErrorMessage</p>
                <div class="mb-3">
                    <label class="form-label" for="email">Email Address</label>
                    <input id="email" type="email" class="form-control" placeholder="Enter your email" @bind="loginModel.Email" required />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="mb-3">
                    <label class="form-label" for="password">Password</label>
                    <input id="password" type="password" class="form-control" placeholder="Enter your password" @bind="loginModel.Password" required />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;



    private async Task Login()
    {
        Debug.WriteLine("Login method called.");
        Debug.WriteLine($"Email: {loginModel.Email}");
        Debug.WriteLine($"Password: {loginModel.Password}");

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            ErrorMessage = "Email and password are required.";
            await JS.InvokeVoidAsync("triggerShakeAnimation"); // Trigger shake animation
            return;
        }

        var authenticatedUser = await AuthenticationService.LoginAsync(loginModel.Email, loginModel.Password);
        Debug.WriteLine($"Authentication result: {authenticatedUser != null}");

        if (authenticatedUser == null)
        {
            ErrorMessage = "Invalid email or password.";
            await JS.InvokeVoidAsync("triggerShakeAnimation"); // Trigger shake animation
            return;
        }

        if (authenticatedUser.Status == "Suspended")
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                title = "Account Suspended",
                text = "Your account has been suspended. Please contact support for further assistance.",
                icon = "error",
                confirmButtonText = "OK"
            });
            return;
        }

        if (authenticatedUser.Role == "Admin")
        {
            Navigation.NavigateTo("/admin-dashboard");
        }
        else
        {
            Navigation.NavigateTo("/dashboard");
        }
    }
}

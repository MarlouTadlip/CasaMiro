@page "/login"
@using CasaMiro.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject AuthenticationService AuthService
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>Login</PageTitle>

<div id="body">
    <div class="login-container">
        <div class="login-box animate__animated animate__fadeIn">
            <h2 class="text-center">Welcome Back</h2>

            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin" FormName="handleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <p class="text-danger animate__animated" id="errorMessage">@ErrorMessage</p>

                <div class="mb-3">
                    <label class="form-label" for="email">Email Address</label>
                    <InputText id="email" type="email" class="form-control" placeholder="Enter your email" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="mb-3">
                    <label class="form-label" for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" placeholder="Enter your password" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;

    private async Task HandleLogin()
    {
        try
        {
            ErrorMessage = string.Empty;
            Console.WriteLine($"SignIn: Attempting login for {loginModel.Email}");

            var user = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (user == null)
            {
                ErrorMessage = "Invalid email or password.";
                Console.WriteLine("SignIn: Invalid email or password");
                await JS.InvokeVoidAsync("triggerShakeAnimation");
                return;
            }

            Console.WriteLine($"SignIn: User {user.Email} logged in, Role: {user.Role}, FullName: {user.FullName}");

            // Wait briefly to ensure state propagation
            await Task.Delay(100);

            // Navigate based on role
            var role = user.Role?.Trim() ?? "User";
            Console.WriteLine($"SignIn: Navigating for role {role}");
            switch (role)
            {
                case "Homeowner":
                    Navigation.NavigateTo("/user-dashboard", forceLoad: true);
                    break;
                case "Admin":
                    Navigation.NavigateTo("/admin-dashboard", forceLoad: true);
                    break;
                case "Staff":
                    Navigation.NavigateTo("/staff-dashboard", forceLoad: true);
                    break;
                default:
                    ErrorMessage = $"Unknown role: {role}";
                    Console.WriteLine($"SignIn: Unknown role: {role}");
                    await JS.InvokeVoidAsync("triggerShakeAnimation");
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SignIn: Login error: {ex.Message}");
            ErrorMessage = "Login failed. Please try again.";
            await JS.InvokeVoidAsync("triggerShakeAnimation");
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
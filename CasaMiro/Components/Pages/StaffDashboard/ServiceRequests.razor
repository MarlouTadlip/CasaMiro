@page "/servicerequests"
@using CasaMiro.Models
@using CasaMiro.Data
@using Microsoft.EntityFrameworkCore
@using CasaMiro.Components.Layout
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthStateProvider
@layout DashboardLayout
@rendermode InteractiveServer

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm mt-4">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h4 class="mb-0 text-white">Service Requests Overview</h4>
                </div>
                <div class="card-body">
                    @if (serviceRequests is not null && serviceRequests.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-hover table-bordered">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>Request ID</th>
                                        <th>Description</th>
                                        <th>Submitted By</th>
                                        <th>Date Created</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var req in serviceRequests)
                                    {
                                        <tr>
                                            <td>@req.Id</td>
                                            <td>@req.RequestId</td>
                                            <td>@(req.Description.Length > 50 ? req.Description[..50] + "..." : req.Description)</td>
                                            <td>@req.User?.FullName</td>
                                            <td>@req.CreatedDate.ToString("MM/dd/yyyy")</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(req.Status)">
                                                    @req.Status
                                                </span>
                                            </td>
                                            <td>
                                                <select class="form-select form-select-sm" @onchange="e => UpdateStatus(req.Id, e.Value?.ToString())">
                                                    <option disabled selected>Change Status</option>
                                                    <option value="Pending">Pending</option>
                                                    <option value="In Progress">In Progress</option>
                                                    <option value="Completed">Completed</option>
                                                    <option value="Rejected">Rejected</option>
                                                </select>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No service requests found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ServiceRequest> serviceRequests = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        serviceRequests = await context.ServiceRequests
            .Include(r => r.User)
            .OrderByDescending(r => r.CreatedDate)
            .ToListAsync();
    }

    private async Task UpdateStatus(int requestId, string? newStatus)
    {
        if (string.IsNullOrWhiteSpace(newStatus)) return;

        using var context = await DbFactory.CreateDbContextAsync();
        var request = await context.ServiceRequests.FindAsync(requestId);
        if (request is not null && request.Status != newStatus)
        {
            request.Status = newStatus;
            await context.SaveChangesAsync();

            // Refresh list
            serviceRequests = await context.ServiceRequests
                .Include(r => r.User)
                .OrderByDescending(r => r.CreatedDate)
                .ToListAsync();
        }
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "Pending" => "bg-warning text-dark",
        "In Progress" => "bg-info text-white",
        "Completed" => "bg-success text-white",
        "Rejected" => "bg-danger text-white",
        _ => "bg-secondary text-white"
    };
}

@page "/announcements"
@using CasaMiro.Models
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using CasaMiro.Components.Layout
@using Microsoft.EntityFrameworkCore
@layout DashboardLayout

<div class="container-fluid">
    <div class="row">

        <!-- Main content -->
        <div class="col-12">
            <div class="card mt-3">
                <div class="card-header">
                    <h4 class="card-title">Announcements</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <button class="btn btn-primary" @onclick="ShowAddAnnouncementModal">
                            <i class="fa-solid fa-plus-circle"></i> Add New Announcement
                        </button>
                    </div>

                    <!-- Announcements Cards -->
                    <div class="row">
                        @foreach (var announcement in announcements)
                        {
                            <div class="col-12 col-md-4 mb-3">
                                <div class="card">
                                    <div class="card-header">
                                        <h5 class="card-title">@announcement.Title</h5>
                                    </div>
                                    <div class="card-body">
                                        <p class="card-text">@announcement.Description</p>
                                        <p class="card-text">
                                            <small class="text-muted">@announcement.Date.ToString("MM/dd/yyyy")</small>
                                        </p>
                                    </div>
                                    <div class="card-footer text-right">
                                        <button class="btn btn-warning btn-sm" @onclick="() => EditAnnouncement(announcement.Id)">
                                            <i class="fa-solid fa-pencil-alt"></i> Edit
                                        </button>
                                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAnnouncement(announcement.Id)">
                                            <i class="fa-solid fa-trash-alt"></i> Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Modal for Adding/Editing Announcement -->
            <div class="modal" tabindex="-1" role="dialog" id="addAnnouncementModal">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">@(announcementEditMode ? "Edit" : "Add") Announcement</h5>
                            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <EditForm Model="currentAnnouncement" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="form-group">
                                    <label for="Title">Title</label>
                                    <InputText id="Title" class="form-control" @bind-Value="currentAnnouncement.Title" />
                                </div>
                                <div class="form-group">
                                    <label for="Description">Description</label>
                                    <InputTextArea id="Description" class="form-control" @bind-Value="currentAnnouncement.Description" />
                                </div>
                                <div class="form-group">
                                    <label for="Date">Date</label>
                                    <InputDate id="Date" class="form-control" @bind-Value="currentAnnouncement.Date" />
                                </div>

                                <button type="submit" class="btn btn-primary">Save Announcement</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Announcement> announcements = new();
    private Announcement currentAnnouncement = new();
    private bool announcementEditMode = false;

    [Inject] private IDbContextFactory<CasaMiro.Data.ApplicationDbContext> DbFactory { get; set; }
    [Inject] private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadAnnouncements();
    }

    private async Task LoadAnnouncements()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        announcements = await context.Announcements.ToListAsync();
        StateHasChanged();
    }

    private void ShowAddAnnouncementModal()
    {
        currentAnnouncement = new Announcement { Date = DateTime.Now };
        announcementEditMode = false;
        JSRuntime.InvokeVoidAsync("showModal", "addAnnouncementModal");
    }


    private void EditAnnouncement(int id)
    {
        currentAnnouncement = announcements.FirstOrDefault(a => a.Id == id) ?? new Announcement();
        announcementEditMode = true;
        JSRuntime.InvokeVoidAsync("showModal", "addAnnouncementModal");
    }

    private async Task HandleValidSubmit()
    {
        using var context = await DbFactory.CreateDbContextAsync();

        if (announcementEditMode)
        {
            context.Announcements.Update(currentAnnouncement);
        }
        else
        {
            context.Announcements.Add(currentAnnouncement);
        }

        await context.SaveChangesAsync();
        await LoadAnnouncements();
        await JSRuntime.InvokeVoidAsync("hideModal", "addAnnouncementModal");
    }

    private async Task DeleteAnnouncement(int id)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmDelete", id);
        if (confirmed)
        {
            using var context = await DbFactory.CreateDbContextAsync();
            var announcement = await context.Announcements.FindAsync(id);

            if (announcement != null)
            {
                context.Announcements.Remove(announcement);
                await context.SaveChangesAsync();
                await LoadAnnouncements();
            }
        }
    }
}

